}
#case2
year1 = as.integer(readline("input year:"))
if (!(year1 %% 4)) & (!(year1 %% 400)) & ((year1 %% 100)){
if (!(year1 %% 4)) && (!(year1 %% 400)) && ((year1 %% 100)){
if (!(year1 %% 4)) && (!(year1 %% 400)) && ((year1 %% 100)){
x1
y1
y1=100
if (!(y1 %% 4)
)
y2= if (!(y1%%4))
)
if (!(y1%%4)){print}
if (!(y1%%4)){}
if (!(y1%%4))
{print("4")} else{ print("100")}
y1=104
if (!(y1%%4))
{print("4")} else{ print("100")}
y1=1
if (!(y1%%4))
{print("4")} else{ print("100")}
year1 = as.integer(readline("input year:"))
if ((!(year1 %% 4)) && (!(year1 %% 400)) && ((year1 %% 100))){
print("Leap year")
} else {
print("Not leap year")
}
year1 = as.integer(readline("input year:"))
if ((!(year1 %% 4)) && (!(year1 %% 400)) && ((year1 %% 100))){
print("Leap year")
} else {
print("Not leap year")
}
if (((!(year1 %% 4)) && (year1 %%100)) || (!(year1 %% 400)) && ((year1 %% 100))){
print("Leap year")
} else {
print("Not leap year")
}
year1
year1 = 1004
if (((!(year1 %% 4)) && (year1 %%100)) || (!(year1 %% 400)) && ((year1 %% 100))){
print("Leap year")
} else {
print("Not leap year")
}
year1 = 1000
if (((!(year1 %% 4)) && (year1 %%100)) || (!(year1 %% 400)) && ((year1 %% 100))){
print("Leap year")
} else {
print("Not leap year")
}
year1 = 2012
year1 = as.integer(readline("input year:"))
print("Leap year")
} else {
print("Not leap year")
}
if (((!(year1 %% 4)) && (year1 %%100)) || (!(year1 %% 400)) && ((year1 %% 100))){
print("Leap year")
} else {
print("Not leap year")
}
year1 =2012
if (((!(year1 %% 4)) && (year1 %%100)) || (!(year1 %% 400)) && ((year1 %% 100))){
print("Leap year")
} else {
print("Not leap year")
}
year1 =2100
if (((!(year1 %% 4)) && (year1 %%100)) || (!(year1 %% 400)) && ((year1 %% 100))){
print("Leap year")
} else {
print("Not leap year")
}
year1 =2101
if (((!(year1 %% 4)) && (year1 %%100)) || (!(year1 %% 400)) && ((year1 %% 100))){
print("Leap year")
} else {
print("Not leap year")
}
if (year1>10){print("d")}
else
if (year1>10){print("d")}
if (year1>10){print("d")
}else{print('1')}
if (year1>10000){print("d")}
if (year1>100000){print("d")
}else{print('1')}
dim_lear_year = function(year1){
if (((!(year1 %% 4)) && (year1 %%100)) || (!(year1 %% 400)) && ((year1 %% 100))){  print("Leap year")
} else {  print("Not leap year")  }
}
View(dim_lear_year)
dim_lear_year = function(year1){
if (((!(year1 %% 4)) && (year1 %%100)) || (!(year1 %% 400)) && ((year1 %% 100))){  return TRUE
} else {  return FALSE  }
}
dim_lear_year = function(year1){
if (((!(year1 %% 4)) && (year1 %%100)) || (!(year1 %% 400)) && ((year1 %% 100))){  return TRUE
else if ((year1 %% 100) == 0)
}
#case3: shofter: &&, ||
year1 = as.integer(readline("input year:"))
dim_lear_year = function(year1){
if (((!(year1 %% 4)) && (year1 %%100)) || (!(year1 %% 400)) && ((year1 %% 100))){  return 1
dim_lear_year = function(year1){
if (((!(year1 %% 4)) && (year1 %%100)) || (!(year1 %% 400)) && ((year1 %% 100))){  return(TRUE)
} else {  return(FALSE)  }
}
View(dim_lear_year)
View(dim_lear_year)
yearS = as.integer(readline("input start year:"))
yearE = as.integer(readline("input end year:"))
for (n in c(yearS:yearE - yearS)){
year_cnt = dim_lear_year(n)
}
print("total:", year_cnt)
n
for (n in yearS:(yearE - yearS)){
year_cnt = dim_lear_year(n)
}
print("total:", year_cnt)
year_cnt
for (n in yearS:(yearE - yearS)){
year_cnt = as.numeric(dim_lear_year(n))
}
print("total:", year_cnt)
year_cnt
yearS
(yearE-yearS)
yearE = 2014
(yearE-yearS)
for(n in 1:10)
print("d",n)
print(n)
for(n in 1:10)
print(n)
for (n in yearS:(yearE - yearS)){
year_cnt = as.numeric(dim_lear_year(n))
}
paste("total:", year_cnt)
y
y
y
y
for (n in yearS:(yearE - yearS)){
year_cnt += as.numeric(dim_lear_year(n))
}
paste("total:", year_cnt)
for (n in yearS:(yearE - yearS)){
year_cnt = year_cnt + as.numeric(dim_lear_year(n))
}
paste("total:", year_cnt)
year_cnt=0
for (n in yearS:(yearE - yearS)){
year_cnt = year_cnt + as.numeric(dim_lear_year(n))
}
paste("total:", year_cnt)
for (n in yearS:(yearE - yearS)){
cnt = cnt +1
}
cnt=0
for (n in yearS:(yearE - yearS)){
cnt = cnt +1
}
print cnt
print(cnt)
yearE
yearS
for (n in 1000:1014{
for (n in 1000:1014){
cnt = cnt +1
}
cnt
cnt = 0
for (n in yearS:yearE){
year_cnt = year_cnt + as.numeric(dim_lear_year(n))
}
_
_
_
_
_
year_cnt=0
for (n in yearS:yearE){
year_cnt = year_cnt + as.numeric(dim_lear_year(n))
}
paste("total:", year_cnt)
yearS = as.integer(readline("input start year:"))
yearE = as.integer(readline("input end year:"))
year_cnt=0
for (n in yearS:yearE){
year_cnt = year_cnt + as.numeric(is_lear_year(n))
}
is_lear_year = function(year1){
if (((!(year1 %% 4)) && (year1 %%100)) || (!(year1 %% 400)) && ((year1 %% 100))){  return(TRUE)
} else {  return(FALSE)  }
}
year_cnt=0
for (n in yearS:yearE){
year_cnt = year_cnt + as.numeric(is_lear_year(n))
}
paste("total:", year_cnt)
year1 = as.integer(readline("input year:"))
year1 = as.integer(readline("input year:"))
#if ( ((!(year1 %% 4)) && (year1 %%100)) || (!(year1 %% 400)) && ((year1 %% 100)) ){
if ( ((!(year1 %% 4)) && (year1 %%100)) || (!(year1 %% 400)) ){
print("Leap year")
} else {
print("Not leap year")
}
#case3: ifelse()
year1 = 800
if ( ((!(year1 %% 4)) && (year1 %%100)) || (!(year1 %% 400)) ){
print("Leap year")
} else {
print("Not leap year")
}
year1 = 1000
if ( ((!(year1 %% 4)) && (year1 %%100)) || (!(year1 %% 400)) ){
print("Leap year")
} else {
print("Not leap year")
}
year1 = 1200
if ( ((!(year1 %% 4)) && (year1 %%100)) || (!(year1 %% 400)) ){
print("Leap year")
} else {
print("Not leap year")
}
year_cnt=0
for (n in yearS:yearE){
if (is_lear_year(n)){
print(n)
year_cnt = year_cnt +1 # as.numeric(is_lear_year(n))
}
}
for (n in yearS:yearE){
if (is_lear_year(n)){
paste0(n)
year_cnt = year_cnt +1 # as.numeric(is_lear_year(n))
}
}
paste("total:", year_cnt)
year_cnt=0
for (n in yearS:yearE){
if (is_lear_year(n)){
paste0(n)
year_cnt = year_cnt +1 # as.numeric(is_lear_year(n))
}
}
paste("total:", year_cnt)
year_cnt=0
for (n in yearS:yearE){
if (is_lear_year(n)){
year_cnt = year_cnt +1 # as.numeric(is_lear_year(n))
paste0("year:",n)
}
}
paste("total:", year_cnt)
year_cnt=0
for (n in yearS:yearE){
if (is_leap_year(n)){
year_cnt = year_cnt +1 # as.numeric(is_leap_year(n))
print("year:",n)
}
}
paste("total:", year_cnt)
is_leap_year = function(year1){
if (((!(year1 %% 4)) && (year1 %%100)) || (!(year1 %% 400)) ){  return(TRUE)
} else {  return(FALSE)  }
}
yearS = as.integer(readline("input start year:"))
year_cnt=0
for (n in yearS:yearE){
if (is_leap_year(n)){
year_cnt = year_cnt +1 # as.numeric(is_leap_year(n))
print("year:",n)
}
}
yearS = as.integer(readline("input start year:"))
yearE = as.integer(readline("input end year:"))
year_cnt=0
for (n in yearS:yearE){
if (is_leap_year(n)){
year_cnt = year_cnt +1 # as.numeric(is_leap_year(n))
print("year:",n)
}
}
print("[","X","]","[","O","]")
paste("[","X","]","[","O","]")
paste0("[","X","]","[","O","]")
x1 <- c("o","x","o")
x2 <- c("x","o","x")
x3 <- c("o","x","o")
draw_pie <- function(x1,x2,x3)
{
for (i in 1:3)
paste0("[",x1[i],"]","[",x2[i],"]","[",x3[i],"]",)
}
draw_pie(x1,x2,d3)
draw_pie(x1,x2,x3)
for (i in 1:3)
paste0("[",x1[i],"]","[",x2[i],"]","[",x3[i],"]")
paste0("[",x1[i],"]","[",x2[i],"]","[",x3[i],"]")
paste0("[",x1[2],"]","[",x2[2],"]","[",x3[2],"]")
paste0("[",x1[1],"]","[",x2[1],"]","[",x3[1],"]")
i
draw_pie(x1,x2,x3)
draw_pie <- function(x1,x2,x3)
{
for (i in 1:3)
paste0("[",x1[i],"]","[",x2[i],"]","[",x3[i],"]")
}
draw_pie <- function(x1,x2,x3)
()
}
}
paste("total:", year_cnt," leap years")
#sub-case1-1:
year_cnt=0
draw_pie <- function(x1,x2,x3)
{
for (i in 1:3)
paste0("[",x1[i],"]","[",x2[i],"]","[",x3[i],"]")
}
draw_pie(x1,x2,x3)
draw_pie <- function(x1,x2,x3)
{
for (i in 1:3)
draw1[i] = c("[",x1[i],"]","[",x2[i],"]","[",x3[i],"]")
return draw1
}
draw1 = c("[",x1[1],"]","[","x2[1]","]")
draw1
draw1 = c("[",x1[1],"]","[",x2[1],"]")
draw1
draw1[1] = c("[",x1[1],"]","[",x2[1],"]")
x1
draw_pie <- function(x1,x2,x3)
{
#for (i in 1:3)
#  draw1[i] = c("[",x1[i],"]","[",x2[i],"]","[",x3[i],"]")
draw1 = c(x1,x2,x3)
return draw1
draw1 = cbind(x1,x2,x3)
draw1
draw2 = rbind(x1,x2,x3)
draw2
x1
x1 = "1",
'2',"3"
x1
x5 = c("1","2","3")
x5
draw3 = cbind(x5,x2,x3)
draw3
draw3 = rbind(x5,x2,x3)
draw3
draw_pie <- function(x1,x2,x3)
{
#for (i in 1:3)
#  draw1[i] = c("[",x1[i],"]","[",x2[i],"]","[",x3[i],"]")
draw1 = cbind(x1,x2,x3)
return draw1
}
draw_pie <- function(x1,x2,x3)
{
#for (i in 1:3)
#  draw1[i] = c("[",x1[i],"]","[",x2[i],"]","[",x3[i],"]")
draw1 = cbind(x1,x2,x3)
return draw1
draw_pie <- function(x1,x2,x3)
{
#for (i in 1:3)
#  draw1[i] = c("[",x1[i],"]","[",x2[i],"]","[",x3[i],"]")
draw1 = cbind(x1,x2,x3)
return(draw1)
}
draw_pie()
x1
x2
x3
x1
draw_pie <- function(x11,x21,x31)
{
#for (i in 1:3)
#  draw1[i] = c("[",x1[i],"]","[",x2[i],"]","[",x3[i],"]")
draw1 = cbind(x11,x21,x31)
return(draw1)
}
draw_pie()
draw_pie(x1,x2,x3)
draw_pie(x1,x2,x3)
draw1
x1 = c('-','-','-')
x2 = c('-','-','-')
x3 = c('-','-','-')
x2 = c('-','-','-')
draw_pie(x1,x2,x3)
?scan
x <- scan()
x <- scan()
x
x <- scan()
x <- scan()
write.table(matrix(rnorm(200*2000), 200), "hugh_matrix.dat", row.names=F, col.names=F)
getwd()
proc.time()
?proc.time
proc.time(matrix(scan("hugh_matrix.dat", n = 200*2000), 200, 2000, byrow = TRUE))
system.time(matrix(scan("hugh_matrix.dat", n = 200*2000), 200, 2000, byrow = TRUE))
sustem.time(as.matrix(read.table("hugh_matrix.dat")))
system.time(as.matrix(read.table("hugh_matrix.dat")))
system.time(as.matrix(read.table("matrix.dat", header = FALSE, nrows = 200, comment.char = "", colClasses = "numeric")))
system.time(as.matrix(read.table("hugh_matrix.dat", header = FALSE, nrows = 200, comment.char = "", colClasses = "numeric")))
system.time(as.matrix(read.table("hugh_matrix.dat", header = FALSE, nrows = 2000, comment.char = "", colClasses = "numeric")))
system.time(as.matrix(read.table("hugh_matrix.dat", header = FALSE, nrows = 2000, comment.char = "", colClasses = "numeric")))
system.time(as.matrix(read.table("hugh_matrix.dat", header = FALSE, nrows = 2000, comment.char = "", colClasses = "numeric")))
system.time(as.matrix(read.table("hugh_matrix.dat", header = FALSE, nrows = 200, comment.char = "", colClasses = "numeric")))
system.time(as.matrix(read.table("hugh_matrix.dat", header = FALSE, nrows = 200, comment.char = "", colClasses = "numeric")))
system.time(as.matrix(read.table("hugh_matrix.dat", header = FALSE, nrows = 200, comment.char = "", colClasses = "numeric")))
system.time(as.matrix(read.table("hugh_matrix.dat")))
code <- c("LMH", "SJC", "CHCH", "SPC", "SOM")
code
writeLines(sample(code, 1e6, replace=TRUE), "hugh_code.dat")
system.time( scan("hugh_code.dat", what=character(0), n=1e6))
system.time(as.factor(scan("hugh_code.dat", what=character(0), n=1e6)))
system.time(as.factor(scan("hugh_code.dat", what=character(0), n=1e6)))
system.time(as.factor(scan("hugh_code.dat", what=character(0), n=1e6)))
system.time(read.table("hugh_code.dat"))
system.time(read.table("hugh_code.dat"))
system.time(read.table("hugh_code.dat", nrows=1e6))
hugh1 = matrix(rnorm(200*2000), 200)
system.time(sort(hugh1))
system.time(sort(hugh1))
hugh1 = matrix(rnorm(2000*2000), 200)
system.time(sort(hugh1))
hugh1 = matrix(rnorm(2000*2000), 2000)
system.time(sort(hugh1))
hugh1 = matrix(rnorm(4000*4000), 2000)
system.time(sort(hugh1))
hugh1 = matrix(rnorm(2500*2500), 2000)
system.time(sort(hugh1))
hugh1 = matrix(rnorm(4000*2500), 2000)
system.time(sort(hugh1))
library(swirl)
windows()
hello1 <- function(){
print("Hello 1")
}
hello2 <- function(){
print("Hello again 2")
}
x=10
ifelse(x>5,hello1,hello2)
?ifelse
rnorm()
rnorm
runif
?runif
u = runif(10)
u
u = runif(10, min=1, max=10)
u
rgamma()
?rgamma
u =rgamma()
u =rgamma(10)
u =rgamma(10,shape,)
u =rgamma(10,shape)
u =rgamma(10,shape,rate=1, scale=1/10)
u =rgamma(10,shape = 1)
u
u =rgamma(10,shape = 10)
u
u = rnorm(10)
u
u
library(devtools)
library("devtools
"")
library("devtools
")
library("devtools")
install.packages("devtools")
library(devtools)
library(swirl)
swirl()
uninstall_all_courses()
swirl()
uninstall_all_courses()
swirl()
getwd
getwd()
setwd("~/Documents/DSC2015/DSC2015_RBasic_noah/"
)
getwd
getwd()
new_lesson("FlowControl_Function", "RBasic_Toturial")
library(swirlify)
install.packages("library(swirlify)")
install.packages("swirlify")
library(swirlify)
devtools::install_github(c("swirldev/swirl", "swirldev/swirlify"))
library(swirlify)
new_lesson("FlowControl_Function", "RBasic_Toturial")
View(draw1)
getwd()
rm(list=ls())
